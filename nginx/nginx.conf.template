# nginx.conf.template - uses ACTIVE_POOL env var substituted by render script
user  nginx;
worker_processes  auto;
pid /var/run/nginx.pid;
events { worker_connections 1024; }

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Upstream pools: order and backup assignment depend on ACTIVE_POOL
    # We generate "backend" upstream below by raw template selection.

    # Primary/backup upstream definition (rendered by entrypoint script)
    # Placeholder - actual rendered upstream will be inserted below
    ##__UPSTREAM_PLACEHOLDER__##

    resolver 127.0.0.11 valid=5s; # Docker embedded DNS

    # Proxy settings: tight timeouts and retry behavior for same-client-request retry
    proxy_connect_timeout 1s;
    proxy_send_timeout 2s;
    proxy_read_timeout 3s;
    send_timeout 3s;
    proxy_buffering off;
    
    log_format pool_log '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        'upstream_status=$upstream_status pool=$upstream_addr';


    access_log /var/log/nginx/bluegreen-access.log pool_log;

    server {
        listen 80 default_server;

        location / {
            # Proxy to the backend upstream
            proxy_pass http://backend;

            # Forward important headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            # Ensure app response headers are forwarded to client
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;

            # Retry within same client request across primary->backup
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;

            # Don't hide upstream response codes, allow pass-through
            proxy_intercept_errors off;
        }

        # health endpoint passes through
        location = /healthz {
            proxy_pass http://backend/healthz;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 2s;
            proxy_connect_timeout 1s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }

        location = /version {
            proxy_pass http://backend/version;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 5s;
            proxy_connect_timeout 1s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
        }
    }
}
